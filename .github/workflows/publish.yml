name: Publish

on:
  release:
    types: [published]

env:
  BRANCH_NAME: ${{ github.event.release.target_commitish }}
  SOLUTION_NAME: ${{ vars.SOLUTION_NAME }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  DOTNET_VERSION: '8.0.x'
  NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'
  BUILD_CONFIGURATION: ''
  VERSION_SUFFIX: ''

jobs:
  build-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Release Configuration
      if: ${{ env.BRANCH_NAME == 'main' && github.event.release.prerelease == false }}
      run: |
          echo "BUILD_CONFIGURATION=Release" >> $GITHUB_ENV
          echo "VERSION_SUFFIX=" >> $GITHUB_ENV 
    
    - name: Debug Configuration
      if: ${{ github.event.release.prerelease }}
      run: |
          echo "BUILD_CONFIGURATION=Debug" >> $GITHUB_ENV
          echo "VERSION_SUFFIX=develop.$(date +'%y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Check Build Configuration
      if: ${{ env.BUILD_CONFIGURATION == '' }}
      run: |
        echo "Invalid Build Configuration"
        exit 1

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_NAME }}

    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_NAME }}

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_NAME }}

    - name: Publish
      run: dotnet publish --no-build --configuration ${{ env.BUILD_CONFIGURATION }} -o ./publish ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj

    - name: Pack and Push
      run: dotnet pack --no-build --configuration ${{ env.BUILD_CONFIGURATION }} -p:PackageOutputPath=../../output --version-suffix "${{ env.VERSION_SUFFIX }}" -p:PackageSource='${{ env.NUGET_SOURCE }}' -p:PushAfterPack=true -p:PackageApiKey='${{ secrets.NUGET_API_KEY }}'
